/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mt.manageapartment.View;

import com.mt.manageapartment.Controller.AdminController.ExcelPrinter;
import com.mt.manageapartment.Dao.RoomDao;
import com.mt.manageapartment.Model.Renter;
import com.mt.manageapartment.Model.Room;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import static org.apache.poi.hssf.usermodel.HeaderFooter.date;
/**
 *
 * @author Admin
 */
public class AdminView extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form AdminView
     */
    public AdminView() {
        initComponents();
        //txtQuanLy.setText("0");
        txtDien.setText("0");
        txtNuoc.setText("0");
        txtBaoDuong.setText("0");
        txtVesinh.setText("0");
        txtTrongXe.setText("0");
        txtNumDap.setText("0");
        txtNumMay.setText("0");
        txtNumOto.setText("0");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnLogout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtMaPhong = new javax.swing.JTextField();
        txtTen = new javax.swing.JTextField();
        txtCmnd = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        txtSearchRoom = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        sortBy = new javax.swing.JComboBox<>();
        btnSort = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnAddRoom = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearchRoom = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        namRbtn = new javax.swing.JRadioButton();
        nuRbtn = new javax.swing.JRadioButton();
        khacRbtn = new javax.swing.JRadioButton();
        txtSoPhong = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        sortTinhTrang = new javax.swing.JComboBox<>();
        jDateChooserDKchu = new com.toedter.calendar.JDateChooser();
        jLabel28 = new javax.swing.JLabel();
        jDateChooserHHchu = new com.toedter.calendar.JDateChooser();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtTenRenter = new javax.swing.JTextField();
        txtCmndRenter = new javax.swing.JTextField();
        txtDiaChiRenter = new javax.swing.JTextField();
        txtSDTRenter = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRenter = new javax.swing.JTable();
        txtSearchRoomRenter = new javax.swing.JTextField();
        btnClearRenter = new javax.swing.JButton();
        sortByRenter = new javax.swing.JComboBox<>();
        btnSortRenter = new javax.swing.JButton();
        btnEditRenter = new javax.swing.JButton();
        btnAddRoomRenter = new javax.swing.JButton();
        btnDeleteRenter = new javax.swing.JButton();
        btnSearchRoomRenter = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        txtSearchIDRenter = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        namRbtnRenter = new javax.swing.JRadioButton();
        nuRbtnRenter = new javax.swing.JRadioButton();
        khacRbtnRenter = new javax.swing.JRadioButton();
        txtSoPhongRenter = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jDateChooserThue = new com.toedter.calendar.JDateChooser();
        jLabel38 = new javax.swing.JLabel();
        jDateChooserThueHH = new com.toedter.calendar.JDateChooser();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblServices = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtDien = new javax.swing.JTextField();
        txtNuoc = new javax.swing.JTextField();
        txtBaoDuong = new javax.swing.JTextField();
        txtVesinh = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtTrongXe = new javax.swing.JTextField();
        sortNop = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        btnEditService = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnDetail = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sortLoaiPhong = new javax.swing.JComboBox<>();
        txtNumOto = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtNumDap = new javax.swing.JTextField();
        txtNumMay = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MinhTai Apartment");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ADMIN");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/31357152.png"))); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 230));

        btnLogout.setBackground(new java.awt.Color(204, 51, 0));
        btnLogout.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 0));
        btnLogout.setText("LOG OUT");
        jPanel2.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 640, 90, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 680));

        jTabbedPane1.setForeground(new java.awt.Color(255, 0, 51));
        jTabbedPane1.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("UTM HelvetIns", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("QUẢN LÝ THÔNG TIN CHỦ HỘ");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 758, 53));
        jPanel4.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(757, 645, 148, 0));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 0));
        jLabel7.setText("MÃ PHÒNG");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 78, 71, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 0));
        jLabel8.setText("HỌ TÊN");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 165, -1, -1));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 0));
        jLabel9.setText("SỐ CCCD");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 202, -1, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 0));
        jLabel10.setText("QUÊ QUÁN");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 242, 71, -1));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 0));
        jLabel11.setText("GIỚI TÍNH");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 94, -1));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 0));
        jLabel12.setText("NGÀY ĐĂNG KÝ");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 98, -1));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 153, 0));
        jLabel13.setText("SỐ ĐIỆN THOẠI");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(306, 198, 98, -1));

        txtMaPhong.setEditable(false);
        jPanel4.add(txtMaPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 73, 177, -1));
        jPanel4.add(txtTen, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 160, 177, -1));
        jPanel4.add(txtCmnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 197, 179, -1));
        jPanel4.add(txtDiaChi, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 237, 177, -1));
        jPanel4.add(txtSDT, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 193, 189, -1));

        tblRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblRooms.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tblRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblRooms);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 277, 922, 350));
        jPanel4.add(txtSearchRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 99, 191, -1));

        btnClear.setBackground(new java.awt.Color(204, 51, 0));
        btnClear.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 0));
        btnClear.setText("Clear");
        jPanel4.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 230, -1, -1));

        sortBy.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        sortBy.setForeground(new java.awt.Color(204, 51, 0));
        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên từ A - Z", "Tên từ Z - A", "Trả phí nhiều nhất", "Trả phí ít nhất" }));
        jPanel4.add(sortBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 233, 109, -1));

        btnSort.setBackground(new java.awt.Color(204, 51, 0));
        btnSort.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnSort.setForeground(new java.awt.Color(255, 255, 0));
        btnSort.setText("Sort");
        jPanel4.add(btnSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(769, 233, -1, -1));

        btnEdit.setBackground(new java.awt.Color(204, 51, 0));
        btnEdit.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 0));
        btnEdit.setText("Edit");
        jPanel4.add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 230, -1, -1));

        btnAddRoom.setBackground(new java.awt.Color(204, 51, 0));
        btnAddRoom.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnAddRoom.setForeground(new java.awt.Color(255, 255, 0));
        btnAddRoom.setText("Add");
        jPanel4.add(btnAddRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, -1, -1));

        btnDelete.setBackground(new java.awt.Color(204, 51, 0));
        btnDelete.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 0));
        btnDelete.setText("Delete");
        jPanel4.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, -1, -1));

        btnSearchRoom.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnSearchRoom.setForeground(new java.awt.Color(204, 51, 0));
        btnSearchRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/—Pngtree—search vector icon with transparent_5156942.png"))); // NOI18N
        btnSearchRoom.setText("Search");
        jPanel4.add(btnSearchRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 185, -1, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setText("Tìm theo tên");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, -1, -1));
        jPanel4.add(txtSearchID, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 145, 141, -1));

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 153, 0));
        jLabel21.setText("Tìm theo mã phòng");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 128, -1, -1));

        buttonGroup1.add(namRbtn);
        namRbtn.setText("Nam");
        jPanel4.add(namRbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 58, -1));

        buttonGroup1.add(nuRbtn);
        nuRbtn.setText("Nữ");
        jPanel4.add(nuRbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 51, -1));

        buttonGroup1.add(khacRbtn);
        khacRbtn.setText("Khác");
        jPanel4.add(khacRbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, 62, -1));
        jPanel4.add(txtSoPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 177, -1));

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 153, 0));
        jLabel22.setText("SỐ PHÒNG");
        jPanel4.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 127, -1, -1));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 153, 0));
        jLabel23.setText("TÌNH TRẠNG");
        jPanel4.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 78, -1, -1));

        sortTinhTrang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chủ nhà ở", "Chủ nhà cho thuê", "Không có ai ở" }));
        jPanel4.add(sortTinhTrang, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 73, 130, -1));

        jDateChooserDKchu.setDateFormatString("dd-MM-yyyy");
        jPanel4.add(jDateChooserDKchu, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 143, -1));

        jLabel28.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 153, 0));
        jLabel28.setText("NGÀY HẾT HẠN");
        jPanel4.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 98, -1));

        jDateChooserHHchu.setDateFormatString("dd-MM-yyyy");
        jPanel4.add(jDateChooserHHchu, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, 143, -1));

        jTabbedPane1.addTab("QUẢN LÝ THÔNG TIN CHỦ HỘ", jPanel4);

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setForeground(new java.awt.Color(255, 255, 255));

        jLabel27.setFont(new java.awt.Font("UTM HelvetIns", 0, 24)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 51, 0));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("QUẢN LÝ THÔNG TIN NGƯỜI THUÊ");

        jLabel29.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 153, 0));
        jLabel29.setText("HỌ TÊN");

        jLabel30.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 153, 0));
        jLabel30.setText("SỐ CCCD");

        jLabel31.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 153, 0));
        jLabel31.setText("QUÊ QUÁN");

        jLabel32.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 153, 0));
        jLabel32.setText("GIỚI TÍNH");

        jLabel33.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(0, 153, 0));
        jLabel33.setText("NGÀY ĐĂNG KÝ");

        jLabel34.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(0, 153, 0));
        jLabel34.setText("SỐ ĐIỆN THOẠI");

        txtSDTRenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTRenterActionPerformed(evt);
            }
        });

        tblRenter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tblRenter);

        btnClearRenter.setBackground(new java.awt.Color(204, 51, 0));
        btnClearRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnClearRenter.setForeground(new java.awt.Color(255, 255, 0));
        btnClearRenter.setText("Clear");

        sortByRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        sortByRenter.setForeground(new java.awt.Color(204, 51, 0));
        sortByRenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên từ A - Z", "Tên từ Z - A", " " }));

        btnSortRenter.setBackground(new java.awt.Color(204, 51, 0));
        btnSortRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnSortRenter.setForeground(new java.awt.Color(255, 255, 0));
        btnSortRenter.setText("Sort");
        btnSortRenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortRenterActionPerformed(evt);
            }
        });

        btnEditRenter.setBackground(new java.awt.Color(204, 51, 0));
        btnEditRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnEditRenter.setForeground(new java.awt.Color(255, 255, 0));
        btnEditRenter.setText("Edit");

        btnAddRoomRenter.setBackground(new java.awt.Color(204, 51, 0));
        btnAddRoomRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnAddRoomRenter.setForeground(new java.awt.Color(255, 255, 0));
        btnAddRoomRenter.setText("Add");

        btnDeleteRenter.setBackground(new java.awt.Color(204, 51, 0));
        btnDeleteRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnDeleteRenter.setForeground(new java.awt.Color(255, 255, 0));
        btnDeleteRenter.setText("Delete");

        btnSearchRoomRenter.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnSearchRoomRenter.setForeground(new java.awt.Color(204, 51, 0));
        btnSearchRoomRenter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/—Pngtree—search vector icon with transparent_5156942.png"))); // NOI18N
        btnSearchRoomRenter.setText("Search");
        btnSearchRoomRenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRoomRenterActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(0, 153, 0));
        jLabel35.setText("Tìm theo tên");

        jLabel36.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(0, 153, 0));
        jLabel36.setText("Tìm theo số phòng");

        buttonGroup1.add(namRbtnRenter);
        namRbtnRenter.setText("Nam");

        buttonGroup1.add(nuRbtnRenter);
        nuRbtnRenter.setText("Nữ");

        buttonGroup1.add(khacRbtnRenter);
        khacRbtnRenter.setText("Khác");

        jLabel37.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(0, 153, 0));
        jLabel37.setText("SỐ PHÒNG");

        jDateChooserThue.setDateFormatString("dd-MM-yyyy");

        jLabel38.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 153, 0));
        jLabel38.setText("NGÀY HẾT HẠN");

        jDateChooserThueHH.setDateFormatString("dd-MM-yyyy");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addGap(38, 38, 38))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                            .addComponent(jLabel29)
                                            .addGap(24, 24, 24))))
                                .addGap(21, 21, 21)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDiaChiRenter)
                                    .addComponent(txtTenRenter)
                                    .addComponent(txtCmndRenter)
                                    .addComponent(txtSoPhongRenter, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                                        .addComponent(namRbtnRenter, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(nuRbtnRenter, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(khacRbtnRenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGap(27, 27, 27))
                                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                                        .addComponent(txtSDTRenter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                                        .addComponent(jDateChooserThue, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jDateChooserThueHH, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(53, 53, 53)
                                                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(btnEditRenter)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAddRoomRenter)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDeleteRenter)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnClearRenter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel36)
                                    .addComponent(jLabel35)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(sortByRenter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtSearchRoomRenter, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtSearchIDRenter, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                            .addComponent(btnSearchRoomRenter))
                                        .addGap(21, 21, 21)
                                        .addComponent(btnSortRenter)))
                                .addGap(18, 18, 18)))))
                .addGap(47, 47, 47))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 942, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSoPhongRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37)
                            .addComponent(txtSearchRoomRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel30)
                                    .addComponent(txtCmndRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel36)
                                .addGap(2, 2, 2)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtSearchIDRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29)
                                    .addComponent(txtTenRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(btnSearchRoomRenter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(namRbtnRenter)
                            .addComponent(nuRbtnRenter)
                            .addComponent(khacRbtnRenter))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserThue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateChooserThueHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(txtSDTRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDiaChiRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31)
                        .addComponent(btnEditRenter)
                        .addComponent(btnAddRoomRenter)
                        .addComponent(btnDeleteRenter)
                        .addComponent(btnClearRenter)
                        .addComponent(sortByRenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSortRenter))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );

        jPanel6.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTabbedPane1.addTab("QUẢN LÝ THÔNG TIN NGƯỜI THUÊ", jPanel6);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblServices);

        jPanel5.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 218, 917, 410));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 0));
        jLabel14.setText("TIỀN ĐIỆN");
        jPanel5.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 136, 74, -1));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 153, 0));
        jLabel15.setText("TIỀN PHÒNG");
        jPanel5.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 153, 0));
        jLabel16.setText("TIỀN BẢO DƯỠNG");
        jPanel5.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, -1));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 153, 0));
        jLabel17.setText("TIỀN VỆ SINH");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 90, -1));

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 153, 0));
        jLabel19.setText("TIỀN TRÔNG XE");
        jPanel5.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, -1, -1));
        jPanel5.add(txtDien, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 107, -1));
        jPanel5.add(txtNuoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 97, -1));
        jPanel5.add(txtBaoDuong, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 95, -1));
        jPanel5.add(txtVesinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 107, -1));

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 153, 0));
        jLabel18.setText("TIỀN NƯỚC");
        jPanel5.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 85, 20));
        jPanel5.add(txtTrongXe, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 180, 100, -1));

        sortNop.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        sortNop.setForeground(new java.awt.Color(204, 51, 0));
        sortNop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã nộp", "Chưa nộp" }));
        sortNop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortNopActionPerformed(evt);
            }
        });
        jPanel5.add(sortNop, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 87, -1));

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 153, 0));
        jLabel20.setText("TÌNH TRẠNG");
        jPanel5.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 81, -1));

        btnEditService.setBackground(new java.awt.Color(204, 0, 0));
        btnEditService.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnEditService.setForeground(new java.awt.Color(255, 255, 0));
        btnEditService.setText("Edit");
        jPanel5.add(btnEditService, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 90, 100, 28));

        btnPrint.setBackground(new java.awt.Color(204, 0, 0));
        btnPrint.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 0));
        btnPrint.setText("Xuất thông tin");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jPanel5.add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 170, -1, -1));

        btnDetail.setBackground(new java.awt.Color(204, 0, 0));
        btnDetail.setFont(new java.awt.Font("UTM HelvetIns", 0, 12)); // NOI18N
        btnDetail.setForeground(new java.awt.Color(255, 255, 0));
        btnDetail.setText("Thống kê");
        jPanel5.add(btnDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 130, 100, -1));

        jLabel1.setFont(new java.awt.Font("UTM HelvetIns", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("THU TIỀN PHÒNG");
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 798, 56));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 51));
        jLabel2.setText("Số lượng:");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, -1, -1));

        sortLoaiPhong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loại 1", "Loại 2", "Loại 3", "Loại 4" }));
        jPanel5.add(sortLoaiPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 107, -1));
        jPanel5.add(txtNumOto, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 90, 71, -1));

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 153, 51));
        jLabel24.setText("Xe ô tô");
        jPanel5.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 90, 43, -1));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 153, 51));
        jLabel25.setText("Xe đạp");
        jPanel5.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 43, -1));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 153, 51));
        jLabel26.setText("Xe máy");
        jPanel5.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 150, 43, -1));
        jPanel5.add(txtNumDap, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 120, 71, -1));
        jPanel5.add(txtNumMay, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, 71, -1));

        jTabbedPane1.addTab("QUẢN LÝ THU QUỸ", jPanel5);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 955, 680));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
            ExcelPrinter.printTableToExcel(tblServices, "Thông tin.xlsx");
            showMessage("In thông tin thành công");
        } catch (IOException ex) {
            Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void sortNopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortNopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortNopActionPerformed

    private void btnSearchRoomRenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRoomRenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchRoomRenterActionPerformed

    private void btnSortRenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortRenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSortRenterActionPerformed

    private void txtSDTRenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTRenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTRenterActionPerformed
    
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    public void showListRoom(ArrayList<Room> list) {
        int size = list.size();
        // với bảng studentTable có 5 cột, 
        // khởi tạo mảng 2 chiều students, trong đó:
        // số hàng: là kích thước của list student 
        // số cột: là 5
        String[] columnNames = {"Mã phòng", "Số phòng","Họ và tên", "CCCD", "Số điện thoại", "Giới tính", "Quê quán",
            "Ngày đăng kí", "Ngày hết hạn","Tình trạng"};
        Object [][] students = new Object[size][10];
        for (int i = 0; i < size; i++) {
            students[i][0] = list.get(i).getMaPhong();
            students[i][1] = list.get(i).getSoPhong();
            students[i][2] = list.get(i).getHoTen();
            students[i][3] = list.get(i).getCmnd();
            students[i][4] = list.get(i).getSdt();            
            students[i][5] = list.get(i).getGioiTinh();
            students[i][6] = list.get(i).getDiaChi();
            students[i][7] = list.get(i).getNgayDangKi();
            students[i][8] = list.get(i).getNgayHH();
            students[i][9] = list.get(i).getTinhTrangO();
        }
        tblRooms.setModel(new DefaultTableModel(students, columnNames));

    }
    public void showListRenter(ArrayList<Renter> list) {
        int size = list.size();
        // với bảng studentTable có 5 cột, 
        // khởi tạo mảng 2 chiều students, trong đó:
        // số hàng: là kích thước của list student 
        // số cột: là 5
        String[] columnNames = {"Số phòng","Họ và tên", "CCCD", "Số điện thoại", "Giới tính", "Quê quán", "Ngày đăng kí", "Ngày hết hạn"};
        Object [][] students = new Object[size][8];
        for (int i = 0; i < size; i++) {
            students[i][0] = list.get(i).getSoPhong();
            students[i][1] = list.get(i).getHoTen();
            students[i][2] = list.get(i).getCmnd();
            students[i][3] = list.get(i).getSdt();            
            students[i][4] = list.get(i).getGioiTinh();
            students[i][5] = list.get(i).getDiaChi();
            students[i][6] = list.get(i).getNgayDangKi();
            students[i][7] = list.get(i).getNgayHH();
            
        }
        tblRenter.setModel(new DefaultTableModel(students, columnNames));

    }
    
    public void showListService(ArrayList<Room> list){
        int size = list.size();
        // với bảng studentTable có 5 cột, 
        // khởi tạo mảng 2 chiều students, trong đó:
        // số hàng: là kích thước của list student 
        // số cột: là 5 quanLy, dien, nuoc, baoDuong, veSinh, trongXe;
        String[] columnNames = {"Mã phòng", "Họ và tên", "Tiền phòng", "Phí điện", 
            "Phí nước", "Phí Bảo Dưỡng", "Phí Vệ sinh", "Phí Trông xe", "Tổng phí", "Tình trạng"};
        Object [][] students = new Object[size][10];
        for (int i = 0; i < size; i++) {
            students[i][0] = list.get(i).getMaPhong();
            students[i][1] = list.get(i).getHoTen();

            students[i][2] = formatNumberWithCommas(list.get(i).getQuanLy())+ " VNĐ";
            students[i][3] = formatNumberWithCommas(list.get(i).getDien())+ " VNĐ";            
            students[i][4] = formatNumberWithCommas(list.get(i).getNuoc())+ " VNĐ";
            students[i][5] = formatNumberWithCommas(list.get(i).getBaoDuong())+ " VNĐ";
            students[i][6] = formatNumberWithCommas(list.get(i).getVeSinh())+ " VNĐ";  
            students[i][7] = formatNumberWithCommas(list.get(i).getTrongXe())+ " VNĐ";
            students[i][8] = formatNumberWithCommas(list.get(i).getTongPhi())+ " VNĐ";
            students[i][9] = list.get(i).getTinhTrang();
        }
        tblServices.setModel(new DefaultTableModel(students, columnNames));
    }
    public void fillRoomFromSelectedRow() {
        // lấy chỉ số của hàng được chọn 
        int row = tblRooms.getSelectedRow();
        if (row >= 0) {
            txtMaPhong.setText(tblRooms.getModel().getValueAt(row, 0).toString());
            txtSoPhong.setText(tblRooms.getModel().getValueAt(row, 1).toString());
            txtTen.setText(tblRooms.getModel().getValueAt(row, 2).toString());
            txtCmnd.setText(tblRooms.getModel().getValueAt(row, 3).toString());
            txtDiaChi.setText(tblRooms.getModel().getValueAt(row, 6).toString());
            //txtGioiTinh.setText(tblRooms.getModel().getValueAt(row, 4).toString());
            //txtNgayDK.setText(tblRooms.getModel().getValueAt(row, 7).toString());
            txtSDT.setText(tblRooms.getModel().getValueAt(row, 4).toString());
            
            Date date = null;
            try {
                date = new SimpleDateFormat("dd-MM-yyyy").parse(tblRooms.getModel().getValueAt(row, 7).toString());
            } catch (ParseException ex) {
                Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
            jDateChooserDKchu.setDate(date);
            //
            Date date1 = null;
            try {
                date1 = new SimpleDateFormat("dd-MM-yyyy").parse(tblRooms.getModel().getValueAt(row, 8).toString());
            } catch (ParseException ex) {
                Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
            jDateChooserHHchu.setDate(date1);
            
            sortTinhTrang.setSelectedItem(tblRooms.getModel().getValueAt(row, 9).toString());
            
            switch (tblRooms.getModel().getValueAt(row, 5).toString()) {
                case "Nam" -> namRbtn.setSelected(true);
                case "Nữ" -> nuRbtn.setSelected(true);
                default -> khacRbtn.setSelected(true);
            }

            btnEdit.setEnabled(true);
            btnAddRoom.setEnabled(false);
            btnDelete.setEnabled(true);
            
        }
    }
    public void fillRenterFromSelectedRow() {
        // lấy chỉ số của hàng được chọn 
        int row = tblRenter.getSelectedRow();
        if (row >= 0) {
            txtSoPhongRenter.setText(tblRenter.getModel().getValueAt(row, 0).toString());
            txtTenRenter.setText(tblRenter.getModel().getValueAt(row, 1).toString());
            txtCmndRenter.setText(tblRenter.getModel().getValueAt(row, 2).toString());
            txtDiaChiRenter.setText(tblRenter.getModel().getValueAt(row, 5).toString());
            //txtNgayDKRenter.setText(tblRenter.getModel().getValueAt(row, 6).toString());
            txtSDTRenter.setText(tblRenter.getModel().getValueAt(row, 3).toString());
            
            switch (tblRenter.getModel().getValueAt(row, 4).toString()) {
                case "Nam" -> namRbtnRenter.setSelected(true);
                case "Nữ" -> nuRbtnRenter.setSelected(true);
                default -> khacRbtnRenter.setSelected(true);
            }

            Date date = null;
            try {
                date = new SimpleDateFormat("dd-MM-yyyy").parse(tblRenter.getModel().getValueAt(row, 6).toString());
            } catch (ParseException ex) {
                Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
            jDateChooserThue.setDate(date);
            //
            Date date1 = null;
            try {
                date1 = new SimpleDateFormat("dd-MM-yyyy").parse(tblRenter.getModel().getValueAt(row, 7).toString());
            } catch (ParseException ex) {
                Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
            jDateChooserThueHH.setDate(date1);
            
            btnEditRenter.setEnabled(true);
            btnAddRoomRenter.setEnabled(false);
            btnDeleteRenter.setEnabled(true);
            txtSoPhongRenter.setEnabled(false);
        }
    }
    public void fillServiceFromSelectedRow() {
        // lấy chỉ số của hàng được chọn 
        int row = tblServices.getSelectedRow();
        if (row >= 0) {
            
            txtMaPhong.setText(tblRooms.getModel().getValueAt(row, 0).toString());
            txtTen.setText(tblRooms.getModel().getValueAt(row, 1).toString());
 
            txtDien.setText(tblServices.getModel().getValueAt(row, 3).toString());
            txtNuoc.setText(tblServices.getModel().getValueAt(row, 4).toString());
            txtBaoDuong.setText(tblServices.getModel().getValueAt(row, 5).toString());
            txtVesinh.setText(tblServices.getModel().getValueAt(row, 6).toString());
            txtTrongXe.setText(tblServices.getModel().getValueAt(row, 7).toString());
            sortNop.setSelectedItem(tblServices.getModel().getValueAt(row, 9).toString());
                    
            // enable Edit and Delete buttons
            
            btnEditService.setEnabled(true);

        }
    }
    public void showRoom(Room room){
        txtMaPhong.setText("" + room.getMaPhong());
        txtSoPhong.setText("" + room.getSoPhong());
        txtTen.setText(room.getHoTen());
        txtCmnd.setText("" + room.getCmnd());
        txtDiaChi.setText(""+room.getDiaChi());  
        txtSDT.setText("" + room.getSdt());

        txtDien.setText("" + 0);
        txtNuoc.setText("" + 0);
        txtBaoDuong.setText("" + 0);
        txtVesinh.setText("" + 0);
        txtTrongXe.setText("" + 0);
        
        sortTinhTrang.setSelectedItem(""+room.getTinhTrangO());
        
        switch (room.getGioiTinh()) {
                case "Nam" -> namRbtn.setSelected(true);
                case "Nữ" -> nuRbtn.setSelected(true);
                default -> khacRbtn.setSelected(true);
            }

        btnSearchRoom.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnAddRoom.setEnabled(false);

    }
    public void showRenter(Renter renter){
        txtSoPhongRenter.setText("" + renter.getSoPhong());
        txtTenRenter.setText(renter.getHoTen());
        txtCmndRenter.setText("" + renter.getCmnd());
        txtDiaChiRenter.setText(""+renter.getDiaChi());  

        txtSDTRenter.setText("" + renter.getSdt());
       
        switch (renter.getGioiTinh()) {
                case "Nam" -> namRbtnRenter.setSelected(true);
                case "Nữ" -> nuRbtnRenter.setSelected(true);
                default -> khacRbtnRenter.setSelected(true);
            }

        btnSearchRoomRenter.setEnabled(true);
        btnEditRenter.setEnabled(true);
        btnDeleteRenter.setEnabled(true);
        btnAddRoomRenter.setEnabled(false);
        
        
    }
    public void showService(Room room){
        txtDien.setText("" + formatNumberWithCommas(room.getDien()) +" VNĐ");
        txtNuoc.setText("" + formatNumberWithCommas(room.getNuoc()) +" VNĐ");
        txtBaoDuong.setText("" + formatNumberWithCommas(room.getBaoDuong()) +" VNĐ");
        txtVesinh.setText("" + formatNumberWithCommas(room.getVeSinh()) +" VNĐ");
        txtTrongXe.setText("" + formatNumberWithCommas(room.getTrongXe()) +" VNĐ");
        sortNop.setSelectedItem(""+room.getTinhTrang());


        
        btnEditService.setEnabled(true);


    }
    public static String formatNumberWithCommas(int number) {
        DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance();
        symbols.setGroupingSeparator('.');
        DecimalFormat formatter = new DecimalFormat("###,###,###,###", symbols);
        return formatter.format(number);
    }
    public Room getRoomInfor() {
        if (!validateName() || !validateCMND() || !validateAddress() || !validateGioiTinh()
                || !validateSDT()
                || !validateDien() || !validateNuoc()
                || !validateBaoDuong() || !validateVesinh() 
                || !validateSoPhong()
                || !validateNgay()) {
            return null;
        }
        try {
            RoomDao roomDao = new RoomDao();
            Room room = new Room();
            
            room.setMaPhong(txtMaPhong.getText().trim());
            room.setSoPhong(txtSoPhong.getText().trim());
            room.setHoTen(txtTen.getText().trim());
            room.setCmnd(txtCmnd.getText().trim());
            room.setDiaChi(txtDiaChi.getText().trim());

            room.setSdt(txtSDT.getText().trim());
            room.setQuanLy(0);  
            room.setDien(0);  
            room.setNuoc(0);  
            room.setBaoDuong(0);  
            room.setVeSinh(0);  
            room.setTrongXe(0);  
            
            room.setTinhTrangO((String) sortTinhTrang.getSelectedItem());
            
            if(namRbtn.isSelected()){
                room.setGioiTinh("Nam");
            } else if(nuRbtn.isSelected()){
                room.setGioiTinh("Nữ");
            } else if(khacRbtn.isSelected()){
                room.setGioiTinh("Khác");
            }
            
            String temp = "" ;
      
            SimpleDateFormat he = new SimpleDateFormat("dd-MM-yyyy");
            temp = he.format(jDateChooserDKchu.getDate());
            room.setNgayDangKi(temp);
            //
            String temp1 = "" ;
      
            SimpleDateFormat he1 = new SimpleDateFormat("dd-MM-yyyy");
            temp1 = he1.format(jDateChooserHHchu.getDate());
            room.setNgayHH(temp1);
            
            
            room.setTinhTrang((String) sortNop.getSelectedItem());
            
           
            
            String priceDien = txtDien.getText().trim();
            String strippedDien = priceDien.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueDien = Integer.parseInt(strippedDien);
            room.setDien(valueDien);
            
            String priceNuoc = txtNuoc.getText().trim();
            String strippedNuoc = priceNuoc.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueNuoc = Integer.parseInt(strippedNuoc);
            room.setNuoc(valueNuoc);
            
            String priceBD = txtBaoDuong.getText().trim();
            String strippedBD = priceBD.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueBD = Integer.parseInt(strippedBD);
            room.setBaoDuong(valueBD);
            
            String priceVS = txtVesinh.getText().trim();
            String strippedVS = priceVS.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueVS = Integer.parseInt(strippedVS);
            room.setVeSinh(valueVS);
            

            int tienTrongXe = Integer.parseInt(txtNumOto.getText())*10000 + 
                    Integer.parseInt(txtNumDap.getText())*2000 + Integer.parseInt(txtNumMay.getText())*5000;
            room.setTrongXe(tienTrongXe);
            
            return room;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
    public Renter getRenterInfor() {
        if (!validateNameRenter()|| !validateCMNDRenter()|| !validateAddressRenter()|| !validateGioiTinhRenter()
                || !validateSDTRenter() || !validateSoPhongRenter()|| !validateNgayRenter()) {
            return null;
        }
        try {
            RoomDao roomDao = new RoomDao();
            Renter renter = new Renter();
            
            renter.setSoPhong(txtSoPhongRenter.getText().trim());
            renter.setHoTen(txtTenRenter.getText().trim());
            renter.setCmnd(txtCmndRenter.getText().trim());
            renter.setDiaChi(txtDiaChiRenter.getText().trim());
            //renter.setNgayDangKi(txtNgayDKRenter.getText().trim());
            renter.setSdt(txtSDTRenter.getText().trim());
        
            String temp = "" ;
      
            SimpleDateFormat he = new SimpleDateFormat("dd-MM-yyyy");
            temp = he.format(jDateChooserThue.getDate());
            renter.setNgayDangKi(temp);
            //
            String temp1 = "" ;
      
            SimpleDateFormat he1 = new SimpleDateFormat("dd-MM-yyyy");
            temp1 = he1.format(jDateChooserThueHH.getDate());
            renter.setNgayHH(temp1);
            
            if(namRbtnRenter.isSelected()){
                renter.setGioiTinh("Nam");
            } else if(nuRbtnRenter.isSelected()){
                renter.setGioiTinh("Nữ");
            } else if(khacRbtnRenter.isSelected()){
                renter.setGioiTinh("Khác");
            }
            return renter;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
    public Room getServiceInfor(){
        if ( !validateDien() || !validateNuoc()
                || !validateBaoDuong() || !validateVesinh()) {
            return null;
        }
        try {
            RoomDao roomDao = new RoomDao();
            Room room = new Room();
            
            room.setHoTen(txtTen.getText().trim());
            room.setMaPhong(txtMaPhong.getText().trim());
            room.setTinhTrang((String) sortNop.getSelectedItem());
                        
            

            switch ((String)sortLoaiPhong.getSelectedItem()) {
                case "Loại 1":
                    room.setQuanLy(500000);
                    break;
                case "Loại 2":
                    room.setQuanLy(1000000);
                    break;
                case "Loại 3":
                    room.setQuanLy(2000000);
                    break;
                case "Loại 4":
                    room.setQuanLy(3000000);
                    break;
                default:
                    throw new AssertionError();
            }
            String priceDien = txtDien.getText().trim();
            String strippedDien = priceDien.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueDien = Integer.parseInt(strippedDien);
            room.setDien(valueDien);
            
            String priceNuoc = txtNuoc.getText().trim();
            String strippedNuoc = priceNuoc.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueNuoc = Integer.parseInt(strippedNuoc);
            room.setNuoc(valueNuoc);
            
            String priceBD = txtBaoDuong.getText().trim();
            String strippedBD = priceBD.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueBD = Integer.parseInt(strippedBD);
            room.setBaoDuong(valueBD);
            
            String priceVS = txtVesinh.getText().trim();
            String strippedVS = priceVS.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
            int valueVS = Integer.parseInt(strippedVS);
            room.setVeSinh(valueVS);
            
//            String priceTX = txtTrongXe.getText().trim();
//            String strippedTX = priceTX.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
//            int valueTX = Integer.parseInt(strippedTX);
//            room.setTrongXe(valueTX);
            int tienTrongXe = Integer.parseInt(txtNumOto.getText())*10000 + 
                    Integer.parseInt(txtNumDap.getText())*2000 + Integer.parseInt(txtNumMay.getText())*5000;
            room.setTrongXe(tienTrongXe);
            
            return room;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
    private boolean validateSoPhong() {
        String numRoom = txtSoPhong.getText();
        if (numRoom == null || "".equals(numRoom.trim())) {
            showMessage("Không được để trống số phòng");
            return false;        

        } else  {
            try {
            Integer.parseInt(numRoom);          
            return true;
            } catch (NumberFormatException e) {
                txtSoPhong.requestFocus();
                showMessage("Sai định dạng số phòng!");
                return false;
            }
        }
        
    }
    private boolean validateNgay(){
            Date date = jDateChooserHHchu.getDate();
            Date dateNow = jDateChooserDKchu.getDate();
            if (date == null){
                showMessage("Không được để trống ngày");
                return false;
            }
            else{

                if (dateNow.after(date)){
                    jDateChooserHHchu.requestFocus();
                    jDateChooserDKchu.requestFocus();
                    showMessage("Lỗi quá hạn!");
                }
                return dateNow.before(date);
            }
    }
    private boolean validateNgayRenter(){
            Date date = jDateChooserThueHH.getDate();
            Date dateNow = jDateChooserThue.getDate();
            if (date == null){
                showMessage("Không được để trống ngày");
                return false;
            }
            else{

                if (dateNow.after(date)){
                    jDateChooserThue.requestFocus();
                    jDateChooserThueHH.requestFocus();
                    showMessage("Lỗi quá hạn!");
                }
                return dateNow.before(date);
            }
    }
    private boolean validateSoPhongRenter() {
        String numRoom = txtSoPhongRenter.getText();
        
        if (numRoom == null || "".equals(numRoom.trim())) {
            showMessage("Không được để trống số phòng");
            return false;        

        } else  {
            try {
            Integer.parseInt(numRoom);          
            return true;
            } catch (NumberFormatException e) {
                txtSoPhongRenter.requestFocus();
                showMessage("Sai định dạng số phòng!");
                return false;
            }
        }
        
    }
    
    private boolean validateCMND() {
        String numSDT = txtCmnd.getText();
        if (numSDT == null || "".equals(numSDT.trim())) {
            showMessage("Không được để trống số cccd");
            return false;        

        } else  {
            try {
            Integer.parseInt(numSDT);          
            return true;
            } catch (NumberFormatException e) {
                txtCmnd.requestFocus();
                showMessage("Sai định dạng số cccd!");
                return false;
            }
        }
        
    }
    private boolean validateCMNDRenter() {
        String numSDT = txtCmndRenter.getText();
        if (numSDT == null || "".equals(numSDT.trim())) {
            showMessage("Không được để trống số cccd");
            return false;        

        } else  {
            try {
            Integer.parseInt(numSDT);          
            return true;
            } catch (NumberFormatException e) {
                txtCmndRenter.requestFocus();
                showMessage("Sai định dạng số cccd!");
                return false;
            }
        }
        
    }
    private boolean validateName() {
        String name = txtTen.getText();
        if (name == null || "".equals(name.trim())) {
            txtTen.requestFocus();
            showMessage("Tên không được để trống. Vui lòng nhập lại.");
            return false;
        } else if (!name.matches("^[a-zA-ZÀ-Ỹà-ỹ\\s]+$")) {
            showMessage("Tên không hợp lệ. Vui lòng chỉ nhập chữ cái và khoảng trắng.");
            return false;
        } else {
            return true;
        }
    }
    private boolean validateNameRenter() {
        String name = txtTenRenter.getText();
        if (name == null || "".equals(name.trim())) {
            txtTenRenter.requestFocus();
            showMessage("Tên không được để trống. Vui lòng nhập lại.");
            return false;
        } else if (!name.matches("^[a-zA-ZÀ-Ỹà-ỹ\\s]+$")) {
            showMessage("Tên không hợp lệ. Vui lòng chỉ nhập chữ cái và khoảng trắng.");
            return false;
        } else {
            return true;
        }
    }

    private boolean validateAddress() {
        String name = txtDiaChi.getText();
        if (name == null || "".equals(name.trim())) {
            txtDiaChi.requestFocus();
            showMessage("Không được để trống địa chỉ.");
            return false;
        }
        return true;
    }
    private boolean validateAddressRenter() {
        String name = txtDiaChiRenter.getText();
        if (name == null || "".equals(name.trim())) {
            txtDiaChiRenter.requestFocus();
            showMessage("Không được để trống địa chỉ.");
            return false;
        }
        return true;
    }

    private boolean validateGioiTinh() {
        if(namRbtn.isSelected() || nuRbtn.isSelected() || khacRbtn.isSelected() ){
                return true;
            }
            showMessage("Không được để trống giới tính.");
            return false;
    }
    private boolean validateGioiTinhRenter() {
        if(namRbtnRenter.isSelected() || nuRbtnRenter.isSelected() || khacRbtnRenter.isSelected() ){
                return true;
            }
            showMessage("Không được để trống giới tính.");
            return false;
    }
    private boolean validateSDT() {
        String numSDT = txtSDT.getText();
        if (numSDT == null || "".equals(numSDT.trim())) {
            showMessage("Không được để trống số điện thoại");
            return false;        

        } else  {
            try {
            Integer.parseInt(numSDT);          
            return true;
            } catch (NumberFormatException e) {
                txtSDT.requestFocus();
                showMessage("Sai định dạng số điện thoại");
                return false;
            }
        }
        
    }
    private boolean validateSDTRenter() {
        String numSDT = txtSDTRenter.getText();
        if (numSDT == null || "".equals(numSDT.trim())) {
            showMessage("Không được để trống số điện thoại");
            return false;        

        } else  {
            try {
            Integer.parseInt(numSDT);          
            return true;
            } catch (NumberFormatException e) {
                txtSDTRenter.requestFocus();
                showMessage("Sai định dạng số điện thoại");
                return false;
            }
        }
        
    }

    private boolean validateDien() {
        String numDien = txtDien.getText();
        String stripped = numDien.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
        
        try {
            Integer.parseInt(stripped);
            
            return true;
        } catch (NumberFormatException e) {
            txtDien.requestFocus();
            showMessage("Sai định dạng số tiền Điện");
            return false;
        }
    }
    private boolean validateNuoc() {
        String numNuoc = txtNuoc.getText();
        String stripped = numNuoc.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
        
        try {
            Integer.parseInt(stripped);
            
            return true;
        } catch (NumberFormatException e) {
            txtNuoc.requestFocus();
            showMessage("Sai định dạng số tiền Nước");
            return false;
        }
    }
    private boolean validateBaoDuong() {
        String numBaoDuong = txtBaoDuong.getText();
        String stripped = numBaoDuong.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
        
        try {
            Integer.parseInt(stripped);
            
            return true;
        } catch (NumberFormatException e) {
            txtBaoDuong.requestFocus();
            showMessage("Sai định dạng số tiền Bảo dưỡng");
            return false;
        }
    }
    private boolean validateVesinh() {
        String numVesinh = txtVesinh.getText();
        String stripped = numVesinh.replaceAll("[^\\d]", ""); // loại bỏ tất cả các ký tự không phải là số
        
        try {
            Integer.parseInt(stripped);
            
            return true;
        } catch (NumberFormatException e) {
            txtVesinh.requestFocus();
            showMessage("Sai định dạng số tiền Vệ sinh");
            return false;
        }
    }
 
    public String getRoomName(){
         String roomname = txtSearchRoom.getText().trim();
         return roomname;
    }
    public String getRoomID(){
         String roomID = txtSearchID.getText().trim();
         return roomID;
    }
    //Renter
    public String getRenterName(){
         String rentername = txtSearchRoomRenter.getText().trim();
         return rentername;
    }
    public String getRenterID(){
         String renterID = txtSearchIDRenter.getText().trim();
         return renterID;
    }
    
    public String getChoice(){
        String choice = (String)sortBy.getSelectedItem();
        return choice;
    }
    //Renter
    public String getChoiceRenter(){
        String choice = (String)sortByRenter.getSelectedItem();
        return choice;
    }
    public String getSoPhongRenter(){
        String soPhongRenter = txtSoPhongRenter.getText().trim();
        return soPhongRenter;
    }
    public void clearRoomInfo() {
        RoomDao roomDao = new RoomDao();
        showListRoom(roomDao.getRoomList());
        txtMaPhong.setText("");
        txtTen.setText("");
        txtSoPhong.setText("");
        //txtSearchFilm.setText("");
        txtCmnd.setText("");
        txtDiaChi.setText("");
        //txtGioiTinh.setText("");
        txtSDT.setText("0");
        //txtNgayDK.setText("");
        
        //txtSearchRoom.setText("");
        //txtSearchID.setText("");
        
        jDateChooserDKchu.setDate(null);
        jDateChooserHHchu.setDate(null);
        
        namRbtn.setSelected(false);
        nuRbtn.setSelected(false);
        khacRbtn.setSelected(true);
        
        
        // disable Edit and Delete buttons
        btnAddRoom.setEnabled(true);
        btnDelete.setEnabled(false);      
        // enable Add button
        btnEdit.setEnabled(false);
        
        
        //
    }
    public void clearRenterInfo() {
        RoomDao roomDao = new RoomDao();
        showListRenter(roomDao.getRenterList());
        txtTenRenter.setText("");
        txtSoPhongRenter.setText("");
        //txtSearchFilm.setText("");
        txtCmndRenter.setText("");
        txtDiaChiRenter.setText("");
        //txtGioiTinh.setText("");
        txtSDTRenter.setText("0");
        //txtNgayDKRenter.setText("");
        jDateChooserThue.setDate(null);
        jDateChooserThueHH.setDate(null);
        //txtSearchRoomRenter.setText("");
        //txtSearchIDRenter.setText("");
        
        namRbtnRenter.setSelected(false);
        nuRbtnRenter.setSelected(false);
        khacRbtnRenter.setSelected(true);
        
        txtSoPhongRenter.setEnabled(true);
        // disable Edit and Delete buttons
        btnAddRoomRenter.setEnabled(true);
        btnDeleteRenter.setEnabled(false);      
        // enable Add button
        btnEditRenter.setEnabled(false);
        
        
        //
    }
    public void clearServiceInfo() {
        RoomDao roomDao = new RoomDao();
        showListRoom(roomDao.getRoomList());
        txtDien.setText("0");
        txtBaoDuong.setText("0");
        txtNuoc.setText("0");
        //txtQuanLy.setText("0");
        txtVesinh.setText("0");
        txtTrongXe.setText("0");
        
        namRbtn.setSelected(false);
        nuRbtn.setSelected(false);
        khacRbtn.setSelected(false);
        
        
        // disable Edit and Delete buttons
        btnAddRoom.setEnabled(true);
        btnDelete.setEnabled(false);      
        // enable Add button
        btnEditService.setEnabled(false);
        
        
        //
    }
    
    public void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRoom;
    private javax.swing.JButton btnAddRoomRenter;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearRenter;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRenter;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEditRenter;
    private javax.swing.JButton btnEditService;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearchRoom;
    private javax.swing.JButton btnSearchRoomRenter;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnSortRenter;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser jDateChooserDKchu;
    private com.toedter.calendar.JDateChooser jDateChooserHHchu;
    private com.toedter.calendar.JDateChooser jDateChooserThue;
    private com.toedter.calendar.JDateChooser jDateChooserThueHH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton khacRbtn;
    private javax.swing.JRadioButton khacRbtnRenter;
    private javax.swing.JRadioButton namRbtn;
    private javax.swing.JRadioButton namRbtnRenter;
    private javax.swing.JRadioButton nuRbtn;
    private javax.swing.JRadioButton nuRbtnRenter;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JComboBox<String> sortByRenter;
    private javax.swing.JComboBox<String> sortLoaiPhong;
    private javax.swing.JComboBox<String> sortNop;
    private javax.swing.JComboBox<String> sortTinhTrang;
    private javax.swing.JTable tblRenter;
    private javax.swing.JTable tblRooms;
    private javax.swing.JTable tblServices;
    private javax.swing.JTextField txtBaoDuong;
    private javax.swing.JTextField txtCmnd;
    private javax.swing.JTextField txtCmndRenter;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDiaChiRenter;
    private javax.swing.JTextField txtDien;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtNumDap;
    private javax.swing.JTextField txtNumMay;
    private javax.swing.JTextField txtNumOto;
    private javax.swing.JTextField txtNuoc;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSDTRenter;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchIDRenter;
    private javax.swing.JTextField txtSearchRoom;
    private javax.swing.JTextField txtSearchRoomRenter;
    private javax.swing.JTextField txtSoPhong;
    private javax.swing.JTextField txtSoPhongRenter;
    private javax.swing.JTextField txtTen;
    private javax.swing.JTextField txtTenRenter;
    private javax.swing.JTextField txtTrongXe;
    private javax.swing.JTextField txtVesinh;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
    }
    public void valueChanged(ListSelectionEvent e) {
    }
    public void addAddRoomListener(ActionListener listener) {
        btnAddRoom.addActionListener(listener);
    }
    
    public void addSearchRoomListener(ActionListener listener) {
        btnSearchRoom.addActionListener(listener);
    }
    
    public void addDeleteListener(ActionListener listener) {
        btnDelete.addActionListener(listener);
    }
    
    public void addEditListener(ActionListener listener){
        btnEdit.addActionListener(listener);
    }
    
    public void addClearListener(ActionListener listener) {
        btnClear.addActionListener(listener);
    }
    
    public void addListRoomSelectionListener(ListSelectionListener listener) {
        tblRooms.getSelectionModel().addListSelectionListener(listener);
    }
    public void addListServiceSelectionListener(ListSelectionListener listener) {
        tblServices.getSelectionModel().addListSelectionListener(listener);
    }
    
    public void addSortListener(ActionListener listener) {
        btnSort.addActionListener(listener);
    }
    //service
    public void addEditServiceListener(ActionListener listener) {
        btnEditService.addActionListener(listener);
    }
    
    public void addLogoutListener(ActionListener listener){
        btnLogout.addActionListener(listener);
    }
    public void addDetailListener(ActionListener listener) {
        btnDetail.addActionListener(listener);
    }

    //
    public void addAddRenterListener(ActionListener listener) {
        btnAddRoomRenter.addActionListener(listener);
    }
    
    public void addSearchRenterListener(ActionListener listener) {
        btnSearchRoomRenter.addActionListener(listener);
    }
    
    public void addDeleteRenterListener(ActionListener listener) {
        btnDeleteRenter.addActionListener(listener);
    }
    
    public void addEditRenterListener(ActionListener listener){
        btnEditRenter.addActionListener(listener);
    }
    
    public void addClearRenterListener(ActionListener listener) {
        btnClearRenter.addActionListener(listener);
    }
    
    public void addListRenterSelectionListener(ListSelectionListener listener) {
        tblRenter.getSelectionModel().addListSelectionListener(listener);
    }
    public void addSortRenterListener(ActionListener listener) {
        btnSortRenter.addActionListener(listener);
    }
    
    public static void main(String[]args){
    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminView().setVisible(true);
            }
        });
    
}
}
